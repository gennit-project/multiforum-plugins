name: Publish Plugins

on:
  push:
    tags:
      - 'v*'  # e.g., v0.1.0

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      GCS_BUCKET: mf-plugins-prod
      GCP_UPLOAD_PREFIX: plugins
      REGISTRY_OBJECT: registry.json

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      # Authenticate to GCP (Workload Identity Federation recommended)
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Install deps & build all plugins
        run: |
          set -euo pipefail
          # Install root dependencies first (includes TypeScript)
          npm ci
          
          # Then install and build each plugin
          for d in plugins/*; do
            if [ -f "$d/package.json" ]; then
              (cd "$d" && npm ci && npm run build)
            fi
          done

      - name: Pack deterministic tarballs and compute sha256
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y tar coreutils jq
          VERSION="${GITHUB_REF_NAME#v}"   # v0.1.0 -> 0.1.0
          TS=0                             # normalize mtime
          mkdir -p out

          for d in plugins/*; do
            [ -f "$d/plugin.json" ] || continue
            ID=$(jq -r '.id' "$d/plugin.json")
            # Stage minimal contents
            STAGE="out/${ID}-${VERSION}"
            mkdir -p "$STAGE/dist"
            cp "$d/plugin.json" "$STAGE/plugin.json"
            if [ ! -f "$d/dist/index.js" ]; then
              echo "Missing dist/index.js in $d" >&2; exit 1
            fi
            cp -r "$d/dist/." "$STAGE/dist/"

            # Create deterministic tarball
            tar --sort=name --owner=0 --group=0 --numeric-owner \
                --mtime="@${TS}" -czf "out/${ID}-${VERSION}.tgz" -C "$STAGE" .
            sha256sum "out/${ID}-${VERSION}.tgz" | awk '{print $1}' > "out/${ID}-${VERSION}.sha256"
          done

      - name: Upload tarballs to GCS
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#v}"
          for tgz in out/*.tgz; do
            base=$(basename "$tgz" .tgz)     # id-version
            id="${base%-*}"
            sha_file="out/${base}.sha256"
            gcloud storage cp "$tgz"       "gs://${GCS_BUCKET}/${GCP_UPLOAD_PREFIX}/${id}/${VERSION}/bundle.tgz"
            gcloud storage cp "$sha_file"  "gs://${GCS_BUCKET}/${GCP_UPLOAD_PREFIX}/${id}/${VERSION}/bundle.sha256"

            # Convenience: upload a copy of plugin.json next to the tarball
            TMPDIR=$(mktemp -d)
            tar -xzf "$tgz" -C "$TMPDIR"
            gcloud storage cp "${TMPDIR}/plugin.json" "gs://${GCS_BUCKET}/${GCP_UPLOAD_PREFIX}/${id}/${VERSION}/plugin.json"
          done

      - name: Generate registry.json and upload
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#v}"

          # Build array entries for each plugin we just uploaded
          arr="[]"
          for tgz in out/*.tgz; do
            base=$(basename "$tgz" .tgz)
            id="${base%-*}"
            sha=$(cat "out/${base}.sha256")
            entry=$(jq -n --arg id "$id" --arg v "$VERSION" --arg sha "$sha" --arg bucket "$GCS_BUCKET" '{
              id: $id,
              versions: [{
                version: $v,
                tarballUrl: ("gs://" + $bucket + "/plugins/" + $id + "/" + $v + "/bundle.tgz"),
                integritySha256: $sha
              }]
            }')
            arr=$(jq --argjson e "$entry" '. + [$e]' <<<"$arr")
          done

          jq -n --arg now "$(date -Is)" --argjson plugins "$arr" \
            '{ updatedAt: $now, plugins: $plugins }' > registry.json

          gcloud storage cp registry.json "gs://${GCS_BUCKET}/registry.json"